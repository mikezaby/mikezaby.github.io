2:I[3862,["221","static/chunks/53dc2434-cbba9649805a64e5.js","139","static/chunks/139-49b50a3bf6f25794.js","254","static/chunks/254-700dd0f479925ac0.js","784","static/chunks/app/posts/web-audio-engine-part3/page-160df2674662c7c1.js"],""]
3:I[3107,[],""]
4:I[6865,[],""]
5:I[2088,["139","static/chunks/139-49b50a3bf6f25794.js","254","static/chunks/254-700dd0f479925ac0.js","313","static/chunks/313-3c66015e67682b11.js","517","static/chunks/app/posts/layout-3c2a5579c52700c6.js"],""]
6:I[9254,["221","static/chunks/53dc2434-cbba9649805a64e5.js","139","static/chunks/139-49b50a3bf6f25794.js","254","static/chunks/254-700dd0f479925ac0.js","931","static/chunks/app/page-f4dd77ccded4be46.js"],""]
0:["ku7pzALfroetMoL7iAgz6",[[["",{"children":["posts",{"children":["web-audio-engine-part3",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":["web-audio-engine-part3",{"children":["__PAGE__",{},["$L1",[["$","h1",null,{"children":"Web Audio Engine Part 3 - Integrating WebAudio API"}],"\n",["$","p",null,{"children":["In the ",["$","a",null,{"href":"/posts/web-audio-engine-part2","children":"previous post"}],", we built the foundation of our Engine, and now we are ready to begin integrating the WebAudio API into our project.\nMore specifically, we will incorporate the WebAudio ",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext","children":"AudioContext"}],"\nand ",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/API/AudioNode","children":"AudioNode"}],"."]}],"\n",["$","p",null,{"children":["You can find the codebase up to this point on the ",["$","a",null,{"href":"https://github.com/mikezaby/web_audio_engine/tree/audio-node","children":"audio-node"}]," branch,\nor you can view the additions compared with the previous post ",["$","a",null,{"href":"https://github.com/mikezaby/web_audio_engine/compare/basic-module...audio-node","children":"here"}],"."]}],"\n",["$","h2",null,{"children":"AudioContext"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"AudioContext"}]," is the backbone of the WebAudio API. To do anything with WebAudio, you must first create an AudioContext.\nIt manages almost everything in WebAudio:"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Set the Sample Rate and Latency"}],": Optimize audio processing to balance between quality (higher sample rates) and responsiveness (lower latency), crucial for real-time applications."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Create AudioNodes"}],": Generate various sources, and processing modules."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Manage Connections Between AudioNodes"}],": Construct sophisticated audio processing graphs by connecting nodes in chains or more complex structures for versatile audio manipulation."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Control Audio Playback"}],": Manage when audio plays, stops, and how it's synchronized with other media or user interactions."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Get the Destination Node"}],": Connect nodes to the context's destination, typically the speakers or audio output device, to produce sound."]}],"\n"]}],"\n",["$","h3",null,{"children":"Integrate"}],"\n",["$","p",null,{"children":["To begin, we will install ",["$","a",null,{"href":"https://github.com/chrisguttandin/standardized-audio-context","children":"standardized-audio-context"}],"\nas we want to have a reliable and consistent way of work in all supported browsers."]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"pnpm install standardized-audio-context\n"}]}],"\n",["$","p",null,{"children":["Now, we will create ",["$","code",null,{"children":"core/Context"}]," that is responsible for creating or getting the current context.\nWe have two kinds of context, the ",["$","code",null,{"children":"AudioContext"}]," and the ",["$","code",null,{"children":"OfflineAudioContext"}],".\nThe difference between that two, is that the first one is rendirng to the hardware output,\nand the offline is rendiring to an ",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer","children":"AudioBuffer"}],".\nSo if we want to have a real time behavior we use the ",["$","code",null,{"children":"AudioContext"}],", on the other hand if we want to generate a wav or mp3 we use the ",["$","code",null,{"children":"OfflineAudioContext"}],".\nWe will not use ",["$","code",null,{"children":"OfflineAudioContext"}],", but we prepare our codebase for this."]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/core/Context.ts\n\nimport {\n  AudioContext,\n  IAudioContext,\n  IOfflineAudioContext,\n  OfflineAudioContext,\n} from \"standardized-audio-context\";\n\nexport type IAnyAudioContext = IAudioContext | IOfflineAudioContext;\n\nlet globalContext: IAnyAudioContext;\n\nexport function getContext(): IAnyAudioContext {\n  if (globalContext) return globalContext;\n\n  setNewAudioContext();\n\n  return globalContext;\n}\n\nexport function setNewAudioContext() {\n  const context = new AudioContext();\n  setContext(context);\n}\n\ninterface OfflineAudioContextProps {\n  length: number;\n  sampleRate: number;\n}\n\nexport function setNewOfflineAudioContext(props: OfflineAudioContextProps) {\n  const context = new OfflineAudioContext(props);\n  setContext(context);\n}\n\nfunction setContext(context: IAnyAudioContext) {\n  globalContext = context;\n}\n"}]}],"\n",["$","p",null,{"children":"Update Engine and Module to assign a context on initialization."}],"\n",["$","p",null,{"children":"Add property:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"context: IAnyAudioContext;\n"}]}],"\n",["$","p",null,{"children":"Initialize in constructor:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"this.context = getContext();\n"}]}],"\n",["$","h2",null,{"children":"AudioNode"}],"\n",["$","p",null,{"children":["As we have integrated ",["$","strong",null,{"children":"AudioContext"}],", which is a prerequisite for creating ",["$","strong",null,{"children":"AudioNodes"}],"."]}],"\n",["$","p",null,{"children":"In the WebAudio API, an AudioNode is a fundamental component used to construct an audio processing graph.\nAudioNodes are individual audio processing units that can generate, shape, manipulate, or analyze audio data.\nEach AudioNode can be connected to other AudioNodes, creating a network where audio signals flow from one node to another."}],"\n",["$","p",null,{"children":"There are several types of AudioNodes, each serving specific purposes:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Source Nodes:"}]," Generate audio signals, e.g., ",["$","code",null,{"children":"OscillatorNode"}]," for tones or ",["$","code",null,{"children":"AudioBufferSourceNode"}]," for playing audio samples."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Processing Nodes:"}]," Modify audio signals, e.g., ",["$","code",null,{"children":"GainNode"}]," for volume control, ",["$","code",null,{"children":"BiquadFilterNode"}]," for tone shaping."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Destination Nodes:"}]," The final node in the audio graph is ",["$","code",null,{"children":"AudioDestinationNode"}]," that outputs the audio to the system's audio output device."]}],"\n"]}],"\n",["$","h3",null,{"children":"Integrate"}],"\n",["$","p",null,{"children":["We want the actual modules to pass the corresponding AudioNode to the abstract Module class.\nHowever, since we need the AudioContext to create an AudioNode, and we don't have access to ",["$","code",null,{"children":"this.context"}]," before calling ",["$","code",null,{"children":"super()"}],", we pass a callback to super that obtains the context and returns the AudioNode instance."]}],"\n",["$","p",null,{"children":"We define an interface for our Module constructor."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/core/Module.ts\ninterface IModuleConstructor<T extends ModuleType>\n  extends Optional<IModule<T>, \"id\"> {\n  audioNode: (context: IAnyAudioContext) => IAudioNode<IAnyAudioContext>;\n}\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"constructor(params: IModuleConstructor<T>) {\n"}]}],"\n",["$","p",null,{"children":"In the constructor we assign AudioNode"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"this.audioNode = audioNode(this.context);\n"}]}],"\n",["$","p",null,{"children":"In the Oscillator module, we define the AudioNode callback and pass it to super."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/modules/Oscillator.ts\nimport { OscillatorNode } from \"standardized-audio-context\";\nimport { IChildParams, ModuleType } from \".\";\nimport { IAnyAudioContext } from \"../core\";\nimport Module, { IModule } from \"../core/Module\";\n\nexport interface IOscillator extends IModule<ModuleType.Oscillator> {}\n\nexport interface IOscillatorProps {\n  wave: OscillatorType;\n  frequency: number;\n}\n\nconst DEFAULT_PROPS: IOscillatorProps = { wave: \"sine\", frequency: 440 };\n\nexport default class Oscillator extends Module<ModuleType.Oscillator> {\n  declare audioNode: OscillatorNode<IAnyAudioContext>;\n\n  constructor(params: IChildParams<ModuleType.Oscillator>) {\n    const props = { ...DEFAULT_PROPS, ...params.props };\n    const audioNode = (context: IAnyAudioContext) =>\n      new OscillatorNode(context);\n\n    super({ ...params, props, audioNode, moduleType: ModuleType.Oscillator });\n  }\n}\n"}]}],"\n",["$","h2",null,{"children":"AudioParam"}],"\n",["$","p",null,{"children":["An ",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/API/AudioParam","children":"AudioParam"}]," is an interface representing an audio-related parameter, typically a volume, frequency, or similar property.\nAudioParams are used to automate and control changes to AudioNode parameters over time."]}],"\n",["$","p",null,{"children":"For example, an OscillatorNode has a frequency AudioParam that can be set or modulated to change the pitch of the tone it generates.\nThis modulation can be done statically or over a period, allowing for sophisticated audio effects like sweeps and transitions."}],"\n",["$","h3",null,{"children":"Integrate"}],"\n",["$","p",null,{"children":["We need a mechanism that triggers a function when props are updated, enabling us to integrate with the ",["$","strong",null,{"children":"AudioNode"}]," or more specifically, with the ",["$","strong",null,{"children":"AudioParam"}],"."]}],"\n",["$","p",null,{"children":["For this reason, we will use ",["$","code",null,{"children":"Object.assign"}]," to trigger the setter of those props:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/core/Module.ts\nset props(value: Partial<ModuleTypeToPropsMapping[T]>) {\n  this._props = { ...this._props, ...value };\n  Object.assign(this, value);\n}\n"}]}],"\n",["$","p",null,{"children":["And this is how we interact with ",["$","strong",null,{"children":"AudioNode"}]," and ",["$","strong",null,{"children":"AudioParam"}]," in Oscillator"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/modules/Oscillator.ts\nset wave(value: IOscillatorProps[\"wave\"]) {\n  this.audioNode.type = value;\n}\n\nset frequency(value: IOscillatorProps[\"frequency\"]) {\n  this.audioNode.frequency.value = value;\n}\n"}]}],"\n",["$","p",null,{"children":["We apply similar changes to the ",["$","a",null,{"href":"https://github.com/mikezaby/web_audio_engine/blob/audio-node/src/modules/Volume.ts","children":"Volume"}]," module."]}],"\n",["$","h2",null,{"children":"Connect modules"}],"\n",["$","p",null,{"children":["From ",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect","children":"MDN"}]]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"connect()"}]," method of the AudioNode interface lets you connect one of the node's outputs to a target, which may be either another ",["$","strong",null,{"children":"AudioNode"}]," (thereby directing the sound data to the specified node) or an ",["$","strong",null,{"children":"AudioParam"}],", so that the node's output data is automatically used to change the value of that parameter over time."]}],"\n"]}],"\n",["$","p",null,{"children":"We'll provide a temporary solution about how to connect modules, as we plan to implement a more advanced version in the next post."}],"\n",["$","p",null,{"children":"We implement a connect function in the Module class, which takes another Module as an argument and then connects the AudioNodes of both."}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/core/Module.ts\nconnect(module: AnyModule) {\n  this.audioNode.connect(module.audioNode);\n}\n"}]}],"\n",["$","p",null,{"children":["Then we expose this method to ",["$","strong",null,{"children":"Engine"}]]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/Engine.ts\nconnect(outputModuleId: string, inputModuleId: string) {\n  const output = this.findModule(outputModuleId);\n  const input = this.findModule(inputModuleId);\n\n  output.connect(input);\n}\n"}]}],"\n",["$","h2",null,{"children":"Startable"}],"\n",["$","p",null,{"children":["There are ",["$","strong",null,{"children":"AudioNodes"}]," that generate signals and have the ability to ",["$","strong",null,{"children":"start"}]," and ",["$","strong",null,{"children":"stop"}],", such as the ",["$","code",null,{"children":"OscillatorNode"}],".\nWe need to provide the ability to start and stop at the module level."]}],"\n",["$","p",null,{"children":["We implement an interface that describes the ",["$","strong",null,{"children":"start"}]," and ",["$","strong",null,{"children":"stop"}]," functions, and then each module is responsible for defining how to handle this."]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/core/Module.ts\nexport interface Startable {\n  start(time: number): void;\n  stop(time: number): void;\n}\n"}]}],"\n",["$","p",null,{"children":["The ",["$","code",null,{"children":"Oscillator"}]," implements this inteface:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"class Oscillator\n  extends Module<ModuleType.Oscillator>\n  implements IOscillatorProps, Startable {\n"}]}],"\n",["$","p",null,{"children":"And defines how this functions work:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"start(time: number) {\n  this.audioNode.start(time);\n}\n\nstop(time: number) {\n  this.audioNode.stop(time);\n\n  this.audioNode = new OscillatorNode(this.context, {\n    type: this.props[\"wave\"],\n    frequency: this.props[\"frequency\"],\n  });\n}\n"}]}],"\n",["$","p",null,{"children":["Since an ",["$","code",null,{"children":"OscillatorNode"}]," can start only once, the only way to provide this functionality is to assign a new OscillatorNode to the audioNode property after the module stops."]}],"\n",["$","p",null,{"children":["We also need to expose ",["$","strong",null,{"children":"start"}]," and ",["$","strong",null,{"children":"stop"}]," functionality to the Engine:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"// file: /src/Engine.ts\nasync start(time?: number) {\n  await this.resume();\n\n  time ??= this.context.currentTime;\n  this.isStarted = true;\n\n  Object.values(this.modules).forEach((m) => {\n    const module = m as unknown as Startable;\n    if (!module.start) return;\n\n    module.start(time);\n  });\n}\n\nstop(time?: number) {\n  time ??= this.context.currentTime;\n  this.isStarted = false;\n\n  Object.values(this.modules).forEach((m) => {\n    const module = m as unknown as Startable;\n    if (!module.stop) return;\n\n    module.stop(time);\n  });\n}\n\nasync resume() {\n  if (this.context instanceof OfflineAudioContext) return;\n\n  return await this.context.resume();\n}\n"}]}],"\n",["$","p",null,{"children":["We also need to ",["$","code",null,{"children":"resume"}]," the ",["$","code",null,{"children":"AudioContext"}],", as the browser starts the context in a ",["$","code",null,{"children":"suspended"}]," state."]}],"\n",["$","h2",null,{"children":"Master"}],"\n",["$","p",null,{"children":["We have already implemented the Oscillator and Volume modules, but to drive our signal to the computer's output, we need at least one more module.\nFor this purpose, we will implement the ",["$","a",null,{"href":"https://github.com/mikezaby/web_audio_engine/blob/audio-node/src/modules/Master.ts","children":"Master module"}],".\nThis module utilizes the AudioDestinationNode as its AudioNode, which serves as the final destination for all audio signals in our audio processing graph.\nThis is where audio gets routed to the hardware, such as speakers or headphones, enabling us to hear the sound."]}],"\n",["$","h2",null,{"children":"Time for action"}],"\n",["$","p",null,{"children":"Let's assume that we have the data for an Oscillator, Volume, and Master assigned to the variables osc, vol, and master, respectively.\nWe want to create a routing path like this:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"osc -> vol -> master\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"Engine.connect(osc.id, vol.id);\nEngine.connect(vol.id, master.id);\n"}]}],"\n",["$","p",null,{"children":["We create a function to toggle (start/stop) the ",["$","strong",null,{"children":"Engine"}],":"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"async function toggle() => {\n  if (Engine.isStarted) {\n    Engine.stop();\n    // This is temporary, we will implement a automate solution for this\n    Engine.connect(osc.id, vol.id);\n  } else {\n    await Engine.start();\n  }\n};\n"}]}],"\n",["$","p",null,{"children":"To make things more interesting, we define an interval that updates the oscillator's frequency over time:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"setInterval(() => {\n  Engine.updateModule({\n    id: osc.id,\n    moduleType: osc.moduleType,\n    changes: { props: { frequency: 2000 * Math.random() } },\n  });\n}, 1000);\n"}]}],"\n",["$","p",null,{"children":"Let's hear the result:"}],"\n",["$","$L2",null,{}],"\n",["$","p",null,{"children":["The complete example of this implementation is available ",["$","a",null,{"href":"https://github.com/mikezaby/web_audio_engine/blob/audio-node/src/main.ts","children":"here"}]]}],"\n",["$","h2",null,{"children":"What's Next"}],"\n",["$","p",null,{"children":"In the next post, we will implement more advanced I/O handling, which will provide information about the available inputs, outputs, and current routing configurations."}]],null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","web-audio-engine-part3","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","$L5",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],"params":{}}],null]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_aaf875 flex min-h-screen flex-col","children":[["$","header",null,{"className":"container flex items-center justify-between py-4 dark:bg-gray-800","children":[["$","h1",null,{"className":"text-xl font-semibold text-gray-900 dark:text-white","children":["$","$L6",null,{"href":"/","children":"Mike Zaby"}]}],["$","nav",null,{"children":["$","ul",null,{"className":"flex space-x-4","children":[["$","li",null,{"children":["$","a",null,{"target":"_blank","href":"https://github.com/mikezaby","className":"transition-colors hover:text-gray-600 dark:hover:text-white","children":["$","svg",null,{"viewBox":"0 0 16 16","className":"h-5 w-5","fill":"currentColor","aria-hidden":"true","children":["$","path",null,{"d":"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"}]}]}]}],["$","li",null,{"children":["$","a",null,{"target":"_blank","href":"https://twitter.com/mikezaby","className":"transition-colors hover:text-blue-500","children":["$","svg",null,{"viewBox":"0 0 24 24","className":"h-5 w-5","fill":"currentColor","aria-hidden":"true","children":["$","path",null,{"d":"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"}]}]}]}],["$","li",null,{"children":["$","a",null,{"target":"_blank","href":"https://youtube.com/@mizakiro","className":"transition-colors hover:text-red-600","children":["$","svg",null,{"viewBox":"0 0 24 24","className":"h-5 w-5","fill":"currentColor","aria-hidden":"true","children":["$","path",null,{"d":"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"}]}]}]}],["$","li",null,{"children":["$","a",null,{"target":"_blank","href":"https://www.linkedin.com/in/michalis-zabaras-97b5002b","className":"transition-colors hover:text-blue-700","children":["$","svg",null,{"viewBox":"0 0 24 24","className":"h-5 w-5","fill":"currentColor","aria-hidden":"true","children":["$","path",null,{"d":"M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"}]}]}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/about","className":"font-bold transition-colors hover:text-gray-600 dark:hover:text-white","children":"About"}]}]]}]}]]}],["$","div",null,{"className":"separator"}],["$","main",null,{"className":"container mt-8 flex-grow","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/c95096fc0885ed51.css","precedence":"next","crossOrigin":""}]]}]}],["$","footer",null,{"className":"container py-8 text-center","children":["$","p",null,{"className":"text-gray-600 dark:text-gray-300","children":"© 2024 Michalis Zabaras. All rights reserved."}]}]]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/19d11c52b217898d.css","precedence":"next","crossOrigin":""}]],"$L7"]]]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Web Audio Engine Part 3 - Integrating WebAudio API"}],["$","meta","3",{"name":"description","content":"It't time to start intergrating WebAudio API to our project!"}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
